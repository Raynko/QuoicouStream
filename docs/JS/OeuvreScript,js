document.addEventListener("DOMContentLoaded", () => {
    const apiKey = "141449uijs7m0mqo4w1opg";
    const folderListUrl = `https://darkibox.com/api/folder/list?key=${apiKey}&files=1`;
    const params = new URLSearchParams(window.location.search);
    const folderId = params.get("id");

    if (folderId) {
        const seasonsList = document.querySelector(".seasons-list");
        const episodesList = document.querySelector(".episodes-list");

        seasonsList.innerHTML = `<p class="loading-message">Chargement...</p>`;

        Promise.all([
            fetch(`${folderListUrl}&fld_id=68894`).then(response => response.json()), // Animes
            fetch(`${folderListUrl}&fld_id=68897`).then(response => response.json())  // Séries
        ])
            .then(([animesData, seriesData]) => {
                const allFolders = [
                    ...(animesData.result?.folders || []),
                    ...(seriesData.result?.folders || [])
                ];

                const folder = allFolders.find(f => f.fld_id === parseInt(folderId, 10));

                if (folder) {
                    document.querySelector(".oeuvre-title").textContent = folder.name;
                    document.title = `${folder.name} | QuoicouStream`;

                    loadSeasons(folderId, seasonsList, episodesList);
                } else {
                    throw new Error("Dossier principal introuvable.");
                }
            })
            .catch(error => {
                console.error("Erreur :", error);
                seasonsList.innerHTML = `<p class="empty-message">Erreur : ${error.message}</p>`;
            });
    }

    const loadSeasons = (folderId, seasonsList, episodesList) => {
        fetch(`${folderListUrl}&fld_id=${folderId}&files=1`)
            .then(response => response.json())
            .then(data => {
                if (data.result?.folders?.length > 0) {
                    seasonsList.innerHTML = "";

                    // Trier les saisons par ordre alphabétique
                    const sortedSeasons = data.result.folders.sort((a, b) => a.name.localeCompare(b.name));

                    sortedSeasons.forEach((folder, index) => {
                        const seasonCard = document.createElement("div");
                        seasonCard.classList.add("card-item");
                        seasonCard.innerHTML = `<p class="card-item-text">${folder.name}</p>`;

                        seasonCard.addEventListener("click", () => {
                            document.querySelectorAll(".card-item").forEach(item => {
                                item.classList.remove("active");
                                item.style.pointerEvents = "auto";
                            });
                            seasonCard.classList.add("active");
                            seasonCard.style.pointerEvents = "none";

                            episodesList.innerHTML = `<p class="loading-message">Chargement...</p>`;
                            loadEpisodes(folder.fld_id, episodesList);
                        });

                        seasonsList.appendChild(seasonCard);

                        if (index === 0) {
                            seasonCard.classList.add("active");
                            seasonCard.style.pointerEvents = "none";
                            episodesList.innerHTML = `<p class="loading-message">Chargement...</p>`;
                            loadEpisodes(folder.fld_id, episodesList);
                        }
                    });
                } else {
                    seasonsList.innerHTML = `<p class="empty-message">Aucune saison trouvée.</p>`;
                }
            })
            .catch(error => {
                console.error("Erreur :", error);
                seasonsList.innerHTML = `<p class="empty-message">Erreur : ${error.message}</p>`;
            });
    };

    const loadEpisodes = (seasonId, episodesList) => {
        fetch(`${folderListUrl}&fld_id=${seasonId}&files=1`)
            .then(response => response.json())
            .then(data => {
                if (data.result?.files?.length > 0) {
                    episodesList.innerHTML = "";

                    // Trier les épisodes par ordre alphabétique
                    const sortedEpisodes = data.result.files.sort((a, b) => a.title.localeCompare(b.title));

                    sortedEpisodes.forEach(file => {
                        const episodeCard = document.createElement("div");
                        episodeCard.classList.add("card-item");
                        episodeCard.innerHTML = `<p class="card-item-text">${file.title}</p>`;

                        // Ajouter un événement click pour rediriger vers episode.html
                        episodeCard.addEventListener("click", () => {
                            const title = document.querySelector(".oeuvre-title").textContent.replace(/\s+/g, ""); // Supprimer les espaces
                            const videoCode = file.file_code;

                            // Rediriger vers episode.html avec les paramètres simplifiés
                            window.location.href = `episode.html?title=${encodeURIComponent(title)}&video=${videoCode}`;
                        });

                        episodesList.appendChild(episodeCard);
                    });
                } else {
                    episodesList.innerHTML = `<p class="empty-message">Aucun épisode trouvé.</p>`;
                }
            })
            .catch(error => {
                console.error("Erreur :", error);
                episodesList.innerHTML = `<p class="empty-message">Erreur : ${error.message}</p>`;
            });
    };

    const returnBtn = document.getElementById("return-btn");
    if (returnBtn) {
        returnBtn.addEventListener("click", () => {
            window.location.href = "index.html";
        });
    }
});