document.addEventListener("DOMContentLoaded", () => {
    const apiKey = "141449uijs7m0mqo4w1opg";
    const folderListUrl = `https://darkibox.com/api/folder/list?key=${apiKey}&files=1`;
    const folderId = new URLSearchParams(window.location.search).get("id");

    const loadSeasons = (folderId, seasonsList, episodesList) => {
        fetch(`${folderListUrl}&fld_id=${folderId}`)
            .then(response => response.json())
            .then(data => {
                if (data.result?.folders?.length) {
                    seasonsList.innerHTML = data.result.folders
                        .sort((a, b) => a.name.localeCompare(b.name))
                        .map((folder, index) => `
                            <div class="card-item ${index === 0 ? "active" : ""}" data-season-id="${folder.fld_id}">
                                <p class="card-item-text">${folder.name}</p>
                            </div>
                        `).join("");

                    // Attacher les événements de clic aux boutons des saisons
                    const seasonButtons = seasonsList.querySelectorAll(".card-item");
                    seasonButtons.forEach(button => {
                        button.addEventListener("click", () => {
                            // Supprimer la classe "active" des autres boutons
                            seasonButtons.forEach(btn => btn.classList.remove("active"));
                            button.classList.add("active");

                            // Charger les épisodes pour la saison sélectionnée
                            const seasonId = button.getAttribute("data-season-id");
                            loadEpisodes(seasonId, episodesList, folderId);
                        });
                    });

                    // Charger les épisodes de la première saison par défaut
                    const firstSeasonId = data.result.folders[0].fld_id;
                    loadEpisodes(firstSeasonId, episodesList, folderId);
                } else {
                    seasonsList.innerHTML = `<p class="empty-message">Aucune saison trouvée.</p>`;
                }
            })
            .catch(() => {
                seasonsList.innerHTML = `<p class="empty-message">Erreur de chargement.</p>`;
            });
    };

    const loadEpisodes = (seasonId, episodesList, oeuvreId) => {
        fetch(`${folderListUrl}&fld_id=${seasonId}`)
            .then(response => response.json())
            .then(data => {
                episodesList.innerHTML = data.result?.files?.length
                    ? data.result.files.sort((a, b) => a.title.localeCompare(b.title)).map(file => `
                        <div class="card-item" onclick="window.location.href='Episode.html?title=${document.querySelector('.oeuvre-title').textContent.replace(/\s+/g, "")}&video=${file.file_code}&id=${oeuvreId}'">
                            <p class="card-item-text">${file.title.match(/S\d{2}E(\d{2})/i) ? `Épisode ${parseInt(file.title.match(/S\d{2}E(\d{2})/i)[1], 10)}` : file.title}</p>
                        </div>
                    `).join("")
                    : `<p class="empty-message">Aucun épisode trouvé.</p>`;
            })
            .catch(() => {
                episodesList.innerHTML = `<p class="empty-message">Erreur de chargement.</p>`;
            });
    };

    if (folderId) {
        const seasonsList = document.querySelector(".seasons-list");
        const episodesList = document.querySelector(".episodes-list");
        fetch(`${folderListUrl}&fld_id=68894`)
            .then(response => response.json())
            .then(data => {
                const folder = data.result?.folders?.find(f => f.fld_id === parseInt(folderId, 10));
                if (folder) {
                    document.querySelector(".oeuvre-title").textContent = folder.name;
                    document.title = `${folder.name} | QuoicouStream`;
                    loadSeasons(folderId, seasonsList, episodesList);
                } else {
                    seasonsList.innerHTML = `<p class="empty-message">Dossier introuvable.</p>`;
                }
            });
    }

    document.getElementById("return-btn").addEventListener("click", () => {
        window.location.href = "index.html";
    });
});